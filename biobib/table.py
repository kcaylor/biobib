# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_table.ipynb.

# %% auto 0
__all__ = ['latex_env', 'decorate_dict', 'sheet_name', 'credentials_filename', 'sh', 'safe_float', 'to_int', 'make_cell',
           'tex_escape', 'str_join', 'stringify', 'colonify', 'reversed', 'Table']

# %% ../nbs/02_table.ipynb 2
import pandas as pd
import numpy as np
import time
import re
from .sheet import Sheet
from jinja2 import Environment, FileSystemLoader, Template
from read_google_sheet import get_dataframe
from read_google_sheet import biobib_sheet as sh
import copy
from nbdev import show_doc
from fastcore.test import *
from fastcore.test import *
from fastcore.basics import *
from fastcore.foundation import *

# %% ../nbs/02_table.ipynb 3
def safe_float(val):
    try:
        return float(val)
    except ValueError:
        return 0


# %% ../nbs/02_table.ipynb 5
latex_env = Environment(
    extensions=['jinja2.ext.do'],
    block_start_string='\BLOCK{',
    block_end_string='}',
    variable_start_string='\VAR{',
    variable_end_string='}',
    comment_start_string='\#{',
    comment_end_string='}',
    line_statement_prefix='%%',
    line_comment_prefix='%#',
    trim_blocks=True,
    autoescape=False,
    loader=FileSystemLoader('templates'))


# %% ../nbs/02_table.ipynb 10
decorate_dict = {
    'Undergrad Author': "-UUUU-",
    'Visitor Author': "-VVVV-",
    'PhD Committee Member': "-MMMM-",
    'Graduate Advisee': "-AAAA-",
    'Postdoctoral Advisee': "-PPPP-"
}

# %% ../nbs/02_table.ipynb 12
def to_int(value:int|str # value to coerce
          )->int: # value
    """ coerces any value to an integer representation """
    try:
        v = str(int(value))
    except:
        v = value
    return v

# %% ../nbs/02_table.ipynb 14
def make_cell(text:str, # string to split into a cell
              size:str='' # spacing 
             )->str: # wrapped text
    """
        wrap text in a makecell
    """
    # split text by commas:
    text = ''.join([x + ',\\\\' for x in text.split(',')])
    text = text[:-3]
    text = "{" + size + " \\makecell{ " + text + "} }"
    return text


# %% ../nbs/02_table.ipynb 16
def tex_escape(text:str # plain text message
              )->str: # message escaped to appear correctly in LaTex
    """
    formats text for use in LaTex
    """
    conv = {
        '-UUUU-': r'$^{\ddagger}$',
        '-VVVV-': r'$^{\star}$',
        '-MMMM-': r'$^{\bullet}$',
        '-AAAA-': r'$^{\blacktriangle}$',
        '-PPPP-': r'$^{\blacklozenge}$',
        '-BOLD_START-': r'\textbf{',
        '-BOLD_END-': r'}',
        '&': r'\&',
        '%': r'\%',
        '$': r'\$',
        '#': r'\#',
        '_': r'\_',
        '{': r'\{',
        '}': r'\}',
        '~': r'\textasciitilde{}',
        '^': r'\^{}',
        '\\': r'\textbackslash{}',
        '<': r'\textless{}',
        '>': r'\textgreater{}',
        'Ω': r'$\Omega$',
        'δ': r'$\delta$',
        '’': r"'",
        '‐': r'--',
        '“': r'``',
        '”': r"''",
        'é': r'\'e',
        '(?:^|\W)nan(?:$|\W)': r'--'   
    }

    text = str(text)
    regex = re.compile('|'.join(re.escape(key) for key in sorted(conv.keys(), key=lambda item: - len(item))))  # NOQA
    result = regex.sub(lambda match: conv[match.group()], text)
    if result == 'nan':
        result = ''
    return result


# %% ../nbs/02_table.ipynb 24
def str_join(df:pd.DataFrame, # dataframe 
             sep:str, # separation character between items
             *cols:list # list of columns to make into a list
            )->str: # string of values
    """ generates a string by concatenating columns in a dataframe """
    from functools import reduce
    return reduce(lambda x, y: x.astype(str).str.cat(y.astype(str), sep=sep),
                  [df[col] for col in cols])


def stringify(value:str|int|float)->str:
    """convert a value into a string"""
    return str(value)


def colonify(string:str  # string that we want to add a colon to
            )->str:      # pre-pend with a colon
    """ pre-pend a string with a colon """
    if string:
        return ": " + string
    else:
        return ""

def reversed(l:list)->list:
    """ reverse a list """
    return l[::-1]

# %% ../nbs/02_table.ipynb 26
latex_env.filters['colonify'] = colonify
latex_env.filters['str_join'] = str_join
latex_env.filters['tex_escape'] = tex_escape
latex_env.filters['make_cell'] = make_cell
latex_env.filters['stringify'] = stringify
latex_env.filters['reversed'] = reversed

# %% ../nbs/02_table.ipynb 30
class Table:
    
    def __init__(self, 
                 sheet:Sheet=None, # google sheet containing data
                 worksheet:str=None, # name of worksheet from which to build the table
                 csv_file:str=None, # name of .csv file
                 env:Environment=latex_env, # environment for formatting
                 table_name:str=None, # Name of table
                 template:str=None, # template variable for output
                 template_file:str=None, # template file if template string not provided
                 filters:list=None, # list of additional filter functions
                ):
        self.worksheet_name = worksheet
        self.table_name = table_name or self.__class__.__name__
        self.df = pd.read_csv(csv_file) if csv_file else sheet.get_dataframe(self.worksheet_name)
        self.columns = ""
        self.type = "longtable"
        self.env = env
        
        if filters:
            for item in filters:
                self.env.filters[item] = filters[item]
        
        if template:
            # self.template = Template(template)
            self.template = self.env.from_string(template)
        elif template_file:
            self.template = self.env.get_template(template_file)

    


# %% ../nbs/02_table.ipynb 32
sheet_name = "Caylor CV"
credentials_filename = 'credentials.json'
sh = Sheet(sheet_name,credentials_filename)

# %% ../nbs/02_table.ipynb 37
@patch
def table_clean_df(self:Table
                  )->pd.DataFrame: # cleaned dataframe
    """ Remove cumulative records and assign categories """
    df = copy.deepcopy(self.df)
    df = self.clean_cumulative(df)
    if hasattr(self,'category'):
        df = df[df.Type == self.category]
    return df
    

@patch
def clean_cumulative(self:Table, 
                       df:pd.DataFrame # dataframe to filter
                      )->pd.DataFrame:
    """
    
    Remove any items that are not part of the current review period if this isn't a 
    cumulative review. 
    
    """
    if self.cumulative is False:
        # Make sure we cast 'Eval' into int.
        df['Eval'] = df['Eval'].astype(int)
        df = df[df.Eval == 1]
    return df

# %% ../nbs/02_table.ipynb 39
@patch
def render_template(self:Table
                   )->str:  # rendered text for this table
    """ Generate text for this table using the table's template. """
    rendered_tex = self.template.render(
        table_name=self.table_name,
        created=time.strftime("%Y-%m-%d %H:%M"),
        items=list(self.df.to_dict('records'))
    )
    return rendered_tex

@patch
def write_template(self:Table, 
                   path=None):  # location to save the template content
    """ 
    Write out the contents of this table using the table's template
    """
    content = self.render_template()
    if path:
        file = path + self.table_name + '.tex'
    else:
        file = self.table_name + 'tex'

    with open(file, "w") as f:
        print(content, file=f)


# %% ../nbs/02_table.ipynb 41
@patch
def href(self:Table, 
         this_href:str,   # href text
         link:str='link'  # link text
        )->str:   # Latex-formatted href 
    if this_href is np.NaN:
        return ""
    else:
        return f"\\href{{{this_href}}}{{[{link}]}}"
