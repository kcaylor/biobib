# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_Awards.ipynb.

# %% auto 0
__all__ = ['award_cv_template', 'Awards']

# %% ../nbs/05_Awards.ipynb 2
from .table import Table, sh
from .sheet import Sheet
from nbdev import show_doc
import pandas as pd

# %% ../nbs/05_Awards.ipynb 5
award_cv_template = r'''% CV Awards Table
% Created on \VAR{created}

\textsc{\underline{Awards \& Honors}}

\begin{longtable}{p{.25in} p{5.5in} }

\endfirsthead
\multicolumn{2}{l}{\hspace{.1in} \textsc{\underline{Awards \& Honors }}  -- continued
\vspace*{.1in} }  \endhead

\BLOCK{for award in items|reverse}
\VAR{award.Year} & \VAR{award.Honor|tex_escape}, \VAR{award.Organization|tex_escape} \\
\BLOCK{endfor}
\end{longtable}

'''


# %% ../nbs/05_Awards.ipynb 6
class Awards(Table):
    """ 
    An Award class of Table for use in generating biobibs and CVs 
    """
    def __init__(
            self,
            sheet:Sheet=None, # Google sheet object
            worksheet:str='Awards',   # worksheet name in google sheet
            csv_file:str=None, # optional csv file (if using csv files) 
            table_name:str='Awards and Honors', # name of table
            cumulative:bool=True, # Is this table cumulative? 
            template=award_cv_template # template content
    ):
        super().__init__(
            sheet=sheet,
            worksheet=worksheet, 
            table_name=table_name,
            csv_file=csv_file, 
            template=template)
        self.cumulative = cumulative
        self.df = self.clean_df()

# %% ../nbs/05_Awards.ipynb 8
@patch
def clean_df(self:Awards,
             sort_by:str='Year', # variable to sort by
             ascending:bool=True # ascending?
            )->pd.DataFrame:  # cleaned dataframe
    """
    Clean the Award table.
    
    """
    df = Table.table_clean_df(self)
    df = df.sort_values(by=[sort_by], ascending=[ascending])
    return df
